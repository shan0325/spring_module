<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="30 seconds">
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <!-- To enable JMX Management -->
    <jmxConfigurator />

    <if condition='property("spring.profiles.active").equals("local")'>
        <then>
            <property name="LOGS_PATH" value="log/app" />
            <property name="LOG_LEVEL" value="DEBUG" />
        </then>
    </if>
    <if condition='property("spring.profiles.active").equals("dev")'>
        <then>
            <property name="LOGS_PATH" value="/var/log/app" />
            <property name="LOG_LEVEL" value="DEBUG" />
        </then>
    </if>
    <if condition='property("spring.profiles.active").equals("prod")'>
        <then>
            <property name="LOGS_PATH" value="/var/log/app" />
            <property name="LOG_LEVEL" value="INFO" />
        </then>
    </if>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %magenta([%thread]) %highlight(%-5level) %cyan(%logger{35}) - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일경로 설정 -->
        <file>${LOGS_PATH}/logback.log</file>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 일자별 로그파일 최대 보관주기(일) -->
            <maxHistory>60</maxHistory>
            <!-- 파일 쓰기가 종료된 log 파일명의 패턴을 지정, (.gz,.zip 등을 넣으면 자동 일자별 로그파일 압축) -->
            <fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 출력패턴 설정-->
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 에러 로그 필터링 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 파일경로 설정 -->
        <file>${LOGS_PATH}/error.log</file>
        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 일자별 로그파일 최대 보관주기(일) -->
            <maxHistory>60</maxHistory>
            <!-- 파일 쓰기가 종료된 log 파일명의 패턴을 지정, (.gz,.zip 등을 넣으면 자동 일자별 로그파일 압축) -->
            <fileNamePattern>${LOGS_PATH}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 출력패턴 설정-->
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <logger name="org.springframework" level="INFO" />
    <logger name="org.springframework.security" level="INFO" />
    <logger name="com.sm.app" level="${LOG_LEVEL}" />

    <if condition='property("spring.profiles.active").equals("local")'>
        <then>
            <logger name="jdbc" level="OFF"/>
            <logger name="jdbc.sqlonly" level="OFF"/><!-- sql문만 로깅할지 여부 -->
            <logger name="jdbc.sqltiming" level="INFO"/><!-- 쿼리문 수행시간 로깅 여부 -->
            <logger name="jdbc.audit" level="OFF"/><!-- ResultSet외 모든 JDBC 호출 정보 로깅할지 여부 -->
            <logger name="jdbc.resultset" level="OFF"/><!-- ResultSet 포함 모든 JDBC 호출 정보를 로깅 -->
            <logger name="jdbc.resultsettable" level="DEBUG"/>
            <logger name="jdbc.connection" level="OFF"/><!-- connection open close 로깅 여부 -->
        </then>
        <else>
            <logger name="jdbc" level="OFF"/>
        </else>
    </if>

    <root level="INFO">
        <if condition='property("spring.profiles.active").equals("local")'>
            <then>
                <appender-ref ref="STDOUT" />
            </then>
            <else>
                <appender-ref ref="STDOUT" />
                <!--<appender-ref ref="ROLLING"/>
                <appender-ref ref="Error" />-->
            </else>
        </if>
    </root>
</configuration>
